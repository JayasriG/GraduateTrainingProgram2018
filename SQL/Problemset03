-- ProblemSet03, August 20th 2018--
ganesh.jayasri@accenture.com


/* Delete the tables if they already exist */
drop table if exists Movie;
drop table if exists Reviewer;
drop table if exists Rating;

/* Create the schema for our tables */

create table Movie(mID int(5) primary key, title text(20), year year, director text(20));

create table Reviewer(rID int(5) primary key, name text(20));

create table Rating(rID int(5), mID int(5), stars int(2), ratingDate date, foreign key(rID) references Movie(rID), foreign key(mID) references Reviewer(mID));



/* Populate the tables with our data */

insert into Movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');

insert into Movie values(102, 'Star Wars', 1977, 'George Lucas');

insert into Movie values(103, 'The Sound of Music', 1965, 'Robert Wise');

insert into Movie values(104, 'E.T.', 1982, 'Steven Spielberg');

insert into Movie values(105, 'Titanic', 1997, 'James Cameron');

insert into Movie values(106, 'Snow White', 1937, null);

insert into Movie values(107, 'Avatar', 2009, 'James Cameron');

insert into Movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

 select * from movie;
+-----+-------------------------+------+------------------+
| mID | title                   | year | director         |
+-----+-------------------------+------+------------------+
| 101 | Gone with the Wind      | 1939 | Victor Fleming   |
| 102 | Star Wars               | 1977 | George Lucas     |
| 103 | The Sound of Music      | 1965 | Robert Wise      |
| 104 | E.T.                    | 1982 | Steven Spielberg |
| 105 | Titanic                 | 1997 | James Cameron    |
| 106 | Snow White              | 1937 | NULL             |
| 107 | Avatar                  | 2009 | James Cameron    |
| 108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+-----+-------------------------+------+------------------+
8 rows in set

insert into Reviewer values(201, 'Sarah Martinez');

insert into Reviewer values(202, 'Daniel Lewis');

insert into Reviewer values(203, 'Brittany Harris');

insert into Reviewer values(204, 'Mike Anderson');

insert into Reviewer values(205, 'Chris Jackson');

insert into Reviewer values(206, 'Elizabeth Thomas');

insert into Reviewer values(207, 'James Cameron');

insert into Reviewer values(208, 'Ashley White');



select * from reviewer;
+-----+------------------+
| rID | name             |
+-----+------------------+
| 201 | Sarah Martinez   |
| 202 | Daniel Lewis     |
| 203 | Brittany Harris  |
| 204 | Mike Anderson    |
| 205 | Chris Jackson    |
| 206 | Elizabeth Thomas |
| 207 | James Cameron    |
| 208 | Ashley White     |
+-----+------------------+
8 rows in set

insert into Rating values(201, 101, 2, '2011-01-22');

insert into Rating values(201, 101, 4, '2011-01-27');

insert into Rating values(202, 106, 4, null);

insert into Rating values(203, 103, 2, '2011-01-20');

insert into Rating values(203, 108, 4, '2011-01-12');

insert into Rating values(203, 108, 2, '2011-01-30');

insert into Rating values(204, 101, 3, '2011-01-09');

insert into Rating values(205, 103, 3, '2011-01-27');

insert into Rating values(205, 104, 2, '2011-01-22');

insert into Rating values(205, 108, 4, null);

insert into Rating values(206, 107, 3, '2011-01-15');

insert into Rating values(206, 106, 5, '2011-01-19');

insert into Rating values(207, 107, 5, '2011-01-20');

insert into Rating values(208, 104, 3, '2011-01-02');



 select * from rating;
+------+------+-------+------------+
| rID  | mID  | stars | ratingDate |
+------+------+-------+------------+
|  201 |  101 |     2 | 2011-01-22 |
|  201 |  101 |     4 | 2011-01-27 |
|  202 |  106 |     4 | NULL       |
|  203 |  103 |     2 | 2011-01-20 |
|  203 |  108 |     4 | 2011-01-12 |
|  203 |  108 |     2 | 2011-01-30 |
|  204 |  101 |     3 | 2011-01-09 |
|  205 |  103 |     3 | 2011-01-27 |
|  205 |  104 |     2 | 2011-01-22 |
|  205 |  108 |     4 | NULL       |
|  206 |  107 |     3 | 2011-01-15 |
|  206 |  106 |     5 | 2011-01-19 |
|  207 |  107 |     5 | 2011-01-20 |
|  208 |  104 |     3 | 2011-01-02 |
+------+------+-------+------------+
14 rows in set


1)Find the titles of all movies directed by Steven Spielberg. (1 point possible)
select title,director from movie where director='Steven Spielberg';
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
2 rows in set

2)Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

select year,stars from rating inner join movie on movie.mid=rating.mid where stars in(4,5) order by year;
+------+-------+
| year | stars |
+------+-------+
| 1937 |     5 |
| 1937 |     4 |
| 1939 |     4 |
| 1981 |     4 |
| 1981 |     4 |
| 2009 |     5 |
+------+-------+
6 rows in set

3)Find the titles of all movies that have no ratings. (1 point possible)

 select title from movie where mid not in(select mid from rating);
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
2 rows in set

4)Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)

 select name from reviewer inner join rating on reviewer.rid=rating.rid where ratingdate is null;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set

5)Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)

select name,title,stars,ratingdate from movie inner join rating inner join reviewer on movie.mid=rating.mid and reviewer.rid=rating.rid order by name,title,stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set

6)For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)
 select name,title

7)For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

select title, MAX(stars) from Rating inner join Movie on movie.mID=rating.mID group by movie.mID order by title;
+-------------------------+------------+
| title                   | MAX(stars) |
+-------------------------+------------+
| Avatar                  |          5 |
| E.T.                    |          3 |
| Gone with the Wind      |          4 |
| Raiders of the Lost Ark |          4 |
| Snow White              |          5 |
| The Sound of Music      |          3 |
+-------------------------+------------+
6 rows in set

8)For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

select title,max(stars)-min(stars) as ratingspread from movie inner join rating on movie.mid=rating.mid group by movie.mid order by title,ratingspread;
+-------------------------+--------------+
| title                   | ratingspread |
+-------------------------+--------------+
| Avatar                  |            2 |
| E.T.                    |            1 |
| Gone with the Wind      |            2 |
| Raiders of the Lost Ark |            2 |
| Snow White              |            1 |
| The Sound of Music      |            1 |
+-------------------------+--------------+
6 rows in set

9)Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)

10)Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

select name,title from movie inner join reviewer inner join rating on movie.mid=rating.mid and reviewer.rid=rating.rid where title='Gone with the Wind';
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the Wind |
| Sarah Martinez | Gone with the Wind |
| Mike Anderson  | Gone with the Wind |
+----------------+--------------------+
3 rows in set

11)For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)
 
select director,title,name,stars from movie inner join reviewer inner join rating on movie.mid=rating.mid and reviewer.rid=rating.rid where name=director;
+---------------+--------+---------------+-------+
| director      | title  | name          | stars |
+---------------+--------+---------------+-------+
| James Cameron | Avatar | James Cameron |     5 |
+---------------+--------+---------------+-------+
1 row in set

12)Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

select name,title from movie inner join reviewer inner join rating on movie.mid=rating.mid and reviewer.rid=rating.rid order by name,title ;
+------------------+-------------------------+
| name             | title                   |
+------------------+-------------------------+
| Ashley White     | E.T.                    |
| Brittany Harris  | Raiders of the Lost Ark |
| Brittany Harris  | Raiders of the Lost Ark |
| Brittany Harris  | The Sound of Music      |
| Chris Jackson    | E.T.                    |
| Chris Jackson    | Raiders of the Lost Ark |
| Chris Jackson    | The Sound of Music      |
| Daniel Lewis     | Snow White              |
| Elizabeth Thomas | Avatar                  |
| Elizabeth Thomas | Snow White              |
| James Cameron    | Avatar                  |
| Mike Anderson    | Gone with the Wind      |
| Sarah Martinez   | Gone with the Wind      |
| Sarah Martinez   | Gone with the Wind      |
+------------------+-------------------------+
14 rows in set

13)Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

select title from movie where mid not in (select mid from rating where rid=(select rid from reviewer where name='Chris Jackson'));
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set

select title from movie where mID not in(select r.mID from rating r inner join reviewer re on r.rID=re.rID where name='Chris Jackson');
Gone with the Wind
Star Wars
Titanic
Snow White
Avatar

14)For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

select distinct r1.rid,re1.name,r2.rid,re2.name from rating r1 inner join rating r2 inner join reviewer re1 inner join reviewer re2 on re1.rid=r1.rid and re2.rid=r2.rid and r1.mid=r2.mid where r1.rid!=r2.rid and r1.rid<r2.rid;
+------+------------------+------+------------------+
| rid  | name             | rid  | name             |
+------+------------------+------+------------------+
|  201 | Sarah Martinez   |  204 | Mike Anderson    |
|  203 | Brittany Harris  |  205 | Chris Jackson    |
|  202 | Daniel Lewis     |  206 | Elizabeth Thomas |
|  206 | Elizabeth Thomas |  207 | James Cameron    |
|  205 | Chris Jackson    |  208 | Ashley White     |
+------+------------------+------+------------------+
5 rows in set

15)For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

 select re.name,m.title,r.stars from movie m inner join reviewer re inner join rating r on m.mid=r.mid and re.rid=r.rid where stars=(select min(stars) from rating group by mid);
Sarah Martinez|Gone with the Wind|2
Brittany Harris|The Sound of Music|2
Brittany Harris|Raiders of the Lost Ark|2
Chris Jackson|E.T.|2

 select re.name,m.title,min(r.stars) from movie m inner join rating r on m.mID=r.mID inner join reviewer re on re.rID=r.rID group by re.name;
Ashley White|E.T.|3
Brittany Harris|The Sound of Music|2
Chris Jackson|E.T.|2
Daniel Lewis|Snow White|4
Elizabeth Thomas|Avatar|3
James Cameron|Avatar|5
Mike Anderson|Gone with the Wind|3
Sarah Martinez|Gone with the Wind|2

 select re.name,m.title,min(r.stars) from movie m inner join rating r on m.mID=r.mID inner join reviewer re on re.rID=r.rID group by m.title;
Elizabeth Thomas|Avatar|3
Chris Jackson|E.T.|2
Sarah Martinez|Gone with the Wind|2
Brittany Harris|Raiders of the Lost Ark|2
Daniel Lewis|Snow White|4
Brittany Harris|The Sound of Music|2

16)List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)
 select m.title,avg(stars) as average from movie m inner join rating r on m.mid=r.mid group by title order by average desc,title;
+-------------------------+---------+
| title                   | average |
+-------------------------+---------+
| Snow White              |  4.5000 |
| Avatar                  |  4.0000 |
| Raiders of the Lost Ark |  3.3333 |
| Gone with the Wind      |  3.0000 |
| E.T.                    |  2.5000 |
| The Sound of Music      |  2.5000 |
+-------------------------+---------+
6 rows in set

17)Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

select name from reviewer where rid in (select rid from rating group by rid having count(rid)>=3);
+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
2 rows in set

select name from Reviewer re where (select count(*) from Rating r where r.rId = re.rId) >= 3;
+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
2 rows in set

18)Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

 select director,title from movie where director in (select director from movie group by director having count(director)>1) order by director,title;
+------------------+-------------------------+
| director         | title                   |
+------------------+-------------------------+
| James Cameron    | Avatar                  |
| James Cameron    | Titanic                 |
| Steven Spielberg | E.T.                    |
| Steven Spielberg | Raiders of the Lost Ark |
+------------------+-------------------------+
4 rows in set

19)Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

select title,avg(stars) as average from rating inner join movie on movie.mid=rating.mid group by title having average>(select avg(stars) from rating);
+-------------------------+---------+
| title                   | average |
+-------------------------+---------+
| Avatar                  |  4.0000 |
| Raiders of the Lost Ark |  3.3333 |
| Snow White              |  4.5000 |
+-------------------------+---------+
3 rows in set

20)Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

select title,avg(stars) as average from rating inner join movie on movie.mid=rating.mid group by title having average<(select avg(stars) from rating);
+--------------------+---------+
| title              | average |
+--------------------+---------+
| E.T.               |  2.5000 |
| Gone with the Wind |  3.0000 |
| The Sound of Music |  2.5000 |
+--------------------+---------+
3 rows in set

21)For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)
select director,title,max(stars) from movie inner join rating on movie.mid=rating.mid and director is not null group by director;
+------------------+-------------------------+------------+
| director         | title                   | max(stars) |
+------------------+-------------------------+------------+
| James Cameron    | Avatar                  |          5 |
| Robert Wise      | The Sound of Music      |          3 |
| Steven Spielberg | Raiders of the Lost Ark |          4 |
| Victor Fleming   | Gone with the Wind      |          4 |
+------------------+-------------------------+------------+
4 rows in set
