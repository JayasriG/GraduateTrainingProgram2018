def add(a,b):
  print("in fun",a,b)
  c=a+b
  return c
a,b=6,5
print("before",a,b)
out=add(b=a,a=b)
print("after fn ",a,b)
print(out)

('before', 6, 5)
('in fun', 5, 6)
('after fn ', 6, 5)
11
_________________________
def add(a):
  print(a)
def add1(*a):
  print(a)
def add2(**a):
  print(a)
def add3(b,*a):
  print(b,a)
add(5)
add1(1,2,3,4,5)
add2(a=1,b=2,c=3)
add3(1,2,3,4,5)

5
(1, 2, 3, 4, 5)
{'a': 1, 'c': 3, 'b': 2}
(1, (2, 3, 4, 5)
_________________________
try:
  print(1/0)
except Exception as error:
  print(error)
  
  
--integer division or modulo by zero

try:
  print(1/0)
except:
  print("came to exception block")
  
 came to exception block
 
 try:
  print(1/0)
except Exception as error:
  print(error)
 --integer division or modulo by zero
 
 try:
  print(1/0)
except Exception as error:
  print(error)
finally:
  print("final block")

--integer division or modulo by zero
--final block


def add_fn(a,b):
  try:
    c=a+b
    print(c)
  except Exception as error:
    print(error)
  finally:
    print("final block")

add_fn(4,'6')

--unsupported operand type(s) for +: 'int' and 'str'
--final block

-----------------------
def add_fn(a,b):
  try:
    c=a+b
    print(c)
  except Exception as error:
    print(error)
  finally:
    print("final block")
a=4
b=6
add_fn(a,b)

-----------
 import name1
def add_fn(a,b):
  try:
    c=a+b
    print(c)
  except Exception as error:
    print(error)
  finally:
    print("final block")

if __name__=="__main__":
	a=4
	b=6
	add_fn(a,b)
	d=name1.sub_fn(5,3)
	print(d)

------
name1.py

def sub_fn(a,b):
	c=a-b
	return c
